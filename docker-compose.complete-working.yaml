# Complete Working System with Proper Airflow Setup
# Includes webserver + scheduler + all microservices + cloud-ready setup

version: '3.8'

services:
  # PostgreSQL for Airflow
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - telematics-net

  # Redis for Airflow
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - telematics-net

  # Airflow Init (One-time setup)
  airflow-init:
    image: apache/airflow:2.7.0
    depends_on:
      - postgres
      - redis
    environment: &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
      AIRFLOW__CORE__FERNET_KEY: 'd6VzWOooXOqkdcq2wo8L_85_JjddKemN-3CcZOBU4pY='
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: 'kafka-python redis requests pandas'
    user: "0:0"
    volumes:
      - ./automation:/opt/airflow
    command: |
      bash -c "
        airflow db init
        airflow users create --username admin --firstname Admin --lastname Admin --role Admin --email admin@telematics.com --password admin
      "
    networks:
      - telematics-net

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.7.0
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
    ports:
      - "8090:8080"
    volumes:
      - ./automation:/opt/airflow
    command: airflow webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - telematics-net

  # Airflow Scheduler (THIS WAS MISSING!)
  airflow-scheduler:
    image: apache/airflow:2.7.0
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
    volumes:
      - ./automation:/opt/airflow
    command: airflow scheduler
    healthcheck:
      test: ["CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "$${HOSTNAME}"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - telematics-net

  # Airflow Worker
  airflow-worker:
    image: apache/airflow:2.7.0
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: "0"
    volumes:
      - ./automation:/opt/airflow
    command: airflow celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
    restart: always
    networks:
      - telematics-net

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - telematics-net

  # Apache Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - telematics-net

  # MLflow Tracking Server
  mlflow:
    image: python:3.9
    ports:
      - "5000:5000"
    command: >
      bash -c "
        pip install mlflow psycopg2-binary boto3 &&
        mlflow server --backend-store-uri postgresql://airflow:airflow@postgres/mlflow --default-artifact-root ./artifacts --host 0.0.0.0 --port 5000
      "
    volumes:
      - mlflow_data:/app
    working_dir: /app
    depends_on:
      - postgres
    networks:
      - telematics-net

  # Trip Service
  trip-service:
    build:
      context: ./microservices/trip-service
      dockerfile: Dockerfile.simple
    ports:
      - "8081:8081"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - kafka
      - redis
    networks:
      - telematics-net

  # Risk Service  
  risk-service:
    build:
      context: ./microservices/risk-service
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - kafka
    networks:
      - telematics-net

  # Pricing Service
  pricing-service:
    build:
      context: ./microservices/pricing-service
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
    depends_on:
      - kafka
      - redis
    networks:
      - telematics-net

  # Driver Service
  driver-service:
    build:
      context: ./microservices/driver-service
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - SERVICE_NAME=driver-service
    networks:
      - telematics-net

  # Notification Service
  notification-service:
    build:
      context: ./microservices/notification-service
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      - SERVICE_NAME=notification-service
    networks:
      - telematics-net

  # Analytics Service
  analytics-service:
    build:
      context: ./microservices/analytics-service
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - REDIS_HOST=redis
    depends_on:
      - kafka
      - redis
    networks:
      - telematics-net

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - TRIP_SERVICE_URL=http://trip-service:8081
      - RISK_SERVICE_URL=http://risk-service:8082
      - PRICING_SERVICE_URL=http://pricing-service:8083
      - DRIVER_SERVICE_URL=http://driver-service:8084
      - NOTIFICATION_SERVICE_URL=http://notification-service:8085
      - ANALYTICS_SERVICE_URL=http://analytics-service:8086
    depends_on:
      - trip-service
      - risk-service
      - pricing-service
      - driver-service
      - notification-service
      - analytics-service
    networks:
      - telematics-net

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - telematics-net

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - telematics-net

networks:
  telematics-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  grafana_data:

